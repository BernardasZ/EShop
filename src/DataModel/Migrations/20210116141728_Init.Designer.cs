// <auto-generated />
using System;
using DataModel.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataModel.Migrations
{
    [DbContext(typeof(EShopDbContext))]
    [Migration("20210116141728_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("CouponItem", b =>
                {
                    b.Property<int>("CouponsCouponId")
                        .HasColumnType("int");

                    b.Property<int>("ItemsItemId")
                        .HasColumnType("int");

                    b.HasKey("CouponsCouponId", "ItemsItemId");

                    b.HasIndex("ItemsItemId");

                    b.ToTable("CouponItem");
                });

            modelBuilder.Entity("DataModel.Models.Coupon", b =>
                {
                    b.Property<int>("CouponId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("coupon_id")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("ActiveFromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("dt_from");

                    b.Property<DateTime?>("ActiveToDate")
                        .HasColumnType("datetime")
                        .HasColumnName("dt_to");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("barcode");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("description");

                    b.Property<DateTime>("InsertionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("ins_dt")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint")
                        .HasColumnName("coupon_type");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(19,4)")
                        .HasColumnName("coupon_value");

                    b.HasKey("CouponId");

                    b.ToTable("coupon");
                });

            modelBuilder.Entity("DataModel.Models.CustomerForm", b =>
                {
                    b.Property<int>("CustomerFormId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("customer_form_id")
                        .UseIdentityColumn();

                    b.Property<string>("AddressLine")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("country");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasColumnName("email");

                    b.Property<DateTime>("InsertionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("ins_dt")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("varchar(12)")
                        .HasColumnName("mobile");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("customer_name");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("customer_surname");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("zip_code");

                    b.HasKey("CustomerFormId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[user_id] IS NOT NULL");

                    b.ToTable("customer_form");
                });

            modelBuilder.Entity("DataModel.Models.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("item_id")
                        .UseIdentityColumn();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("item_code");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("description");

                    b.Property<DateTime>("InsertionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("ins_dt")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("item_name");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<byte[]>("RowVertion")
                        .HasColumnType("timestamp")
                        .HasColumnName("row_version");

                    b.HasKey("ItemId");

                    b.ToTable("item");
                });

            modelBuilder.Entity("DataModel.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("order_id")
                        .UseIdentityColumn();

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("comment");

                    b.Property<int>("CustomerFormId")
                        .HasColumnType("int")
                        .HasColumnName("customer_form_id");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime")
                        .HasColumnName("order_dt");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint")
                        .HasColumnName("order_status");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerFormId");

                    b.ToTable("order");
                });

            modelBuilder.Entity("DataModel.Models.Provider", b =>
                {
                    b.Property<int>("ProviderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("provider_id")
                        .UseIdentityColumn();

                    b.Property<string>("AddressLine")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("city");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("company_name");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("country");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasColumnName("email");

                    b.Property<DateTime>("InsertionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("ins_dt")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("varchar(12)")
                        .HasColumnName("mobile");

                    b.Property<string>("VATCode")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("vat_code");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("zip_code");

                    b.HasKey("ProviderId");

                    b.ToTable("provider");
                });

            modelBuilder.Entity("DataModel.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id")
                        .UseIdentityColumn();

                    b.Property<string>("LoginName")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasColumnName("login");

                    b.Property<string>("PassValue")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasColumnName("pass");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("reg_dt");

                    b.Property<int>("UserRoleId")
                        .HasColumnType("int")
                        .HasColumnName("user_role_id");

                    b.HasKey("UserId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("user");
                });

            modelBuilder.Entity("DataModel.Models.UserRole", b =>
                {
                    b.Property<int>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_role_id")
                        .UseIdentityColumn();

                    b.Property<int>("Role")
                        .HasColumnType("int")
                        .HasColumnName("role_type");

                    b.HasKey("UserRoleId");

                    b.ToTable("user_role");
                });

            modelBuilder.Entity("ItemOrder", b =>
                {
                    b.Property<int>("ItemsItemId")
                        .HasColumnType("int");

                    b.Property<int>("OrdersOrderId")
                        .HasColumnType("int");

                    b.HasKey("ItemsItemId", "OrdersOrderId");

                    b.HasIndex("OrdersOrderId");

                    b.ToTable("ItemOrder");
                });

            modelBuilder.Entity("ItemProvider", b =>
                {
                    b.Property<int>("ItemsItemId")
                        .HasColumnType("int");

                    b.Property<int>("ProvidersProviderId")
                        .HasColumnType("int");

                    b.HasKey("ItemsItemId", "ProvidersProviderId");

                    b.HasIndex("ProvidersProviderId");

                    b.ToTable("ItemProvider");
                });

            modelBuilder.Entity("CouponItem", b =>
                {
                    b.HasOne("DataModel.Models.Coupon", null)
                        .WithMany()
                        .HasForeignKey("CouponsCouponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataModel.Models.Item", null)
                        .WithMany()
                        .HasForeignKey("ItemsItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModel.Models.CustomerForm", b =>
                {
                    b.HasOne("DataModel.Models.User", "User")
                        .WithOne("CustomerForm")
                        .HasForeignKey("DataModel.Models.CustomerForm", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataModel.Models.Order", b =>
                {
                    b.HasOne("DataModel.Models.CustomerForm", "CustomerForm")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerForm");
                });

            modelBuilder.Entity("DataModel.Models.User", b =>
                {
                    b.HasOne("DataModel.Models.UserRole", "UserRole")
                        .WithMany("Users")
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("ItemOrder", b =>
                {
                    b.HasOne("DataModel.Models.Item", null)
                        .WithMany()
                        .HasForeignKey("ItemsItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataModel.Models.Order", null)
                        .WithMany()
                        .HasForeignKey("OrdersOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ItemProvider", b =>
                {
                    b.HasOne("DataModel.Models.Item", null)
                        .WithMany()
                        .HasForeignKey("ItemsItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataModel.Models.Provider", null)
                        .WithMany()
                        .HasForeignKey("ProvidersProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModel.Models.CustomerForm", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DataModel.Models.User", b =>
                {
                    b.Navigation("CustomerForm")
                        .IsRequired();
                });

            modelBuilder.Entity("DataModel.Models.UserRole", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
